{"ast":null,"code":"export var validateName = function validateName(name) {\n  var nameRegex = /^[a-zA-Z]+$/;\n  if (!nameRegex.test(name)) {\n    alert(\"Invalid name: login cannot contain numbers, hyphens, spaces, special characters\");\n    setValidationError(\"Invalid name\");\n  } else {\n    setValidationError(false);\n  }\n};\nexport var validateEmail = function validateEmail(email) {\n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    alert(\"Invalid email: it must contain @ and domain part, invalid space\");\n    setValidationError(\"Invalid email\");\n  } else {\n    setValidationError(false);\n  }\n};","map":{"version":3,"names":["validateName","name","nameRegex","test","alert","setValidationError","validateEmail","email","emailRegex"],"sources":["/Users/Anastasia/Desktop/goit-react_native-hw-04-navigation/utils/validation.js"],"sourcesContent":["export const validateName = (name) => {\n  const nameRegex = /^[a-zA-Z]+$/;\n  if (!nameRegex.test(name)) {\n    alert(\n      \"Invalid name: login cannot contain numbers, hyphens, spaces, special characters\"\n    );\n    setValidationError(\"Invalid name\");\n  } else {\n    setValidationError(false);\n  }\n};\n\nexport const validateEmail = (email) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    alert(\"Invalid email: it must contain @ and domain part, invalid space\");\n    setValidationError(\"Invalid email\");\n  } else {\n    setValidationError(false);\n  }\n};\n"],"mappings":"AAAA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAYA,CAAIC,IAAI,EAAK;EACpC,IAAMC,SAAS,GAAG,aAAa;EAC/B,IAAI,CAACA,SAAS,CAACC,IAAI,CAACF,IAAI,CAAC,EAAE;IACzBG,KAAK,CACH,iFACF,CAAC;IACDC,kBAAkB,CAAC,cAAc,CAAC;EACpC,CAAC,MAAM;IACLA,kBAAkB,CAAC,KAAK,CAAC;EAC3B;AACF,CAAC;AAED,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAAK,EAAK;EACtC,IAAMC,UAAU,GAAG,4BAA4B;EAC/C,IAAI,CAACA,UAAU,CAACL,IAAI,CAACI,KAAK,CAAC,EAAE;IAC3BH,KAAK,CAAC,iEAAiE,CAAC;IACxEC,kBAAkB,CAAC,eAAe,CAAC;EACrC,CAAC,MAAM;IACLA,kBAAkB,CAAC,KAAK,CAAC;EAC3B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}